import heapq

# Goal state
goal_state = [[1, 2, 3],
              [4, 5, 6],
              [7, 8, 0]]

# Moves: up, down, left, right
moves = [(-1,0), (1,0), (0,-1), (0,1)]

def manhattan_distance(state):
    distance = 0
    for i in range(3):
        for j in range(3):
            val = state[i][j]
            if val == 0:
                continue
            goal_x, goal_y = divmod(val - 1, 3)
            distance += abs(i - goal_x) + abs(j - goal_y)
    return distance

def find_zero(state):
    for i in range(3):
        for j in range(3):
            if state[i][j] == 0:
                return i, j

def get_neighbors(state):
    x, y = find_zero(state)
    neighbors = []
    for dx, dy in moves:
        nx, ny = x + dx, y + dy
        if 0 <= nx < 3 and 0 <= ny < 3:
            new_state = [row[:] for row in state]
            new_state[x][y], new_state[nx][ny] = new_state[nx][ny], new_state[x][y]
            neighbors.append(new_state)
    return neighbors

def astar(start):
    heap = [(manhattan_distance(start), 0, start, [])]
    visited = set()

    while heap:
        est_cost, cost, state, path = heapq.heappop(heap)
        state_tuple = tuple(tuple(row) for row in state)

        if state == goal_state:
            return path + [state]

        if state_tuple in visited:
            continue
        visited.add(state_tuple)

        for neighbor in get_neighbors(state):
            heapq.heappush(heap, (
                cost + 1 + manhattan_distance(neighbor),
                cost + 1,
                neighbor,
                path + [state]
            ))

    return None

# Example start state
start_state = [[1, 2, 3],
               [4, 0, 6],
               [7, 5, 8]]

solution = astar(start_state)

# Print solution steps
if solution:
    for step in solution:
        for row in step:
            print(row)
        print("---")
else:
    print("No solution found.")
